package com.marklasater.malware.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.marklasater.malware.model.IpAddressInfo;
import com.marklasater.malware.model.MalwareReport;
import com.marklasater.malware.service.HttpService;
import com.marklasater.malware.service.DataService;
import com.marklasater.malware.service.FeedParser;
import com.mashape.unirest.http.JsonNode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service("MalwareDataService")
@Slf4j
public class MalwareDataServiceImpl implements DataService<MalwareReport> {

    @Autowired
    HttpService httpService;

    @Autowired
    @Resource(name="MalwareFeedParser")
    FeedParser<MalwareReport> malwareFeedParser;

    public List<MalwareReport> getData(){
        String response = httpService.getString("https://urlhaus.abuse.ch/downloads/csv", new HashMap<>());
        List<MalwareReport> malwareReports = malwareFeedParser.parseCsvFeed(response);
        int numberOfIpAddressToGet = malwareReports.size() < 20 ? malwareReports.size() : 20;
        for(int i = 0; i < numberOfIpAddressToGet; i++){
            //This is in here to limit the API calls against ip-api.com - The limit is 150 requests / minute
            malwareReports.get(i).setIpAddressInfo(getIpAddressInformation(malwareReports.get(i).getBaseUrl()));
        }

        return malwareReports;
    }

    public IpAddressInfo getIpAddressInformation(String url){
        try{
            JsonNode response = httpService.getJson("http://ip-api.com/json/" + url, new HashMap<>());
            ObjectMapper mapper = new ObjectMapper();
            return mapper.convertValue(getMap(response), IpAddressInfo.class);
        } catch(Exception e){
            log.error("Failed to get ip address for " + "http://ip-api.com/json/" + url);
        }

        return null;
    }

    private Map<String, Object> getMap(JsonNode node){
        Map<String, Object> map = new HashMap<>();
        if(node != null){
            node.getObject().keySet().forEach(item -> map.put(item, node.getObject().get(item)));
        }
        return map;
    }
}
