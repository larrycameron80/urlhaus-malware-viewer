package com.marklasater.malware.service.impl;

import com.marklasater.malware.model.MalwareReport;
import com.marklasater.malware.service.FeedParser;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.*;
import java.util.*;

@Service("MalwareFeedParser")
@Slf4j
public class MalwareFeedParserImpl implements FeedParser<MalwareReport> {

    @Value("${malware.csv.id.location}")
    private int idLocation;
    @Value("${malware.csv.dateAdded.location}")
    private int dateAddedLocation;
    @Value("${malware.csv.url.location}")
    private int urlLocation;
    @Value("${malware.csv.urlStatus.location}")
    private int urlStatusLocation;
    @Value("${malware.csv.threat.location}")
    private int threatLocation;
    @Value("${malware.csv.tags.location}")
    private int tagsLocation;
    @Value("${malware.csv.urlHausLink.location}")
    private int urlHausLinkLocation;

    public List<MalwareReport> parseCsvFeed(String csv){
        try{
            InputStream inputStream = new ByteArrayInputStream(csv.getBytes());
            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));

            String line = br.readLine();
            List<MalwareReport> malwareReports = new ArrayList<>();
            while (line != null){
                if(!line.startsWith("#")){
                    malwareReports.add(parseCsvLine(line));
                }
                line = br.readLine();
            }

            return malwareReports;
        } catch (IOException  e){
            log.error("Failed to parse feed", e);
        }

        return Collections.emptyList();
    }

    public MalwareReport parseCsvLine(String line){
        line = line.replaceFirst("\"", "");
        line = line.substring(0, line.lastIndexOf('\"'));
        String[] items = line.split("\",\"");

        MalwareReport malwareReport = new MalwareReport();
        malwareReport.setId(items[idLocation]);
        malwareReport.setDateAdded(items[dateAddedLocation]);
        malwareReport.setUrl(items[urlLocation]);
        malwareReport.setUrlStatus(items[urlStatusLocation]);
        malwareReport.setThreat(items[threatLocation]);
        malwareReport.setTags(Arrays.asList(items[tagsLocation].split(",")));
        malwareReport.setUrlHausLink(items[urlHausLinkLocation]);
        malwareReport.setBaseUrl(getBaseUrl(malwareReport.getUrl()));

        return malwareReport;
    }

    private String getBaseUrl(String url){
        String baseUrl = "";
        if(url.contains("//")){
            //Strip out the https:// or http:// base off the location of //
            baseUrl = url.substring(url.indexOf("//")+2);
        }
        if(baseUrl.contains("/")){
            //Strip off any additional portion after the top level domain
            baseUrl = baseUrl.substring(0, baseUrl.indexOf('/'));
        }

        if(!baseUrl.equals("")){
            return baseUrl;
        }

        return url;
    }
}
