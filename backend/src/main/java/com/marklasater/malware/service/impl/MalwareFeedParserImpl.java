package com.marklasater.malware.service.impl;

import com.marklasater.malware.model.MalwareReport;
import com.marklasater.malware.service.MalwareFeedParser;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.*;
import java.util.*;

@Service
@Slf4j
public class MalwareFeedParserImpl implements MalwareFeedParser {
    public List<MalwareReport> parseCsvFeed(String csv){
        try{
            InputStream inputStream = new ByteArrayInputStream(csv.getBytes());
            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));

            String line = br.readLine();
            List<MalwareReport> malwareReports = new ArrayList<>();
            while (line != null){

                if(!line.startsWith("#")){
                    malwareReports.add(parseCsvLine(line));
                }
                line = br.readLine();
            }

            return malwareReports;
        } catch (IOException  e){
            log.error("Failed to parse feed", e);
        }

        return Collections.emptyList();
    }

    private MalwareReport parseCsvLine(String line){
        line = line.replace("\"", "");
        String[] items = line.split(",");

        MalwareReport malwareReport = new MalwareReport();
        malwareReport.setId(items[0]);
        malwareReport.setDateAdded(items[1]);
        malwareReport.setUrl(items[2]);
        malwareReport.setUrlStatus(items[3]);
        malwareReport.setThreat(items[4]);
        malwareReport.setTags(Arrays.asList(items[5].split(",")));
        malwareReport.setUrlHausLink(items[6]);
        malwareReport.setBaseUrl(getBaseUrl(malwareReport.getUrl()));

        return malwareReport;
    }

    private String getBaseUrl(String url){
        String baseUrl = "";
        if(url.contains("//")){
            //Strip out the https:// or http:// base off the location of //
            baseUrl = url.substring(url.indexOf("//")+2);
        }
        if(baseUrl.contains("/")){
            //Strip off any additional portion after the top level domain
            baseUrl = baseUrl.substring(0, baseUrl.indexOf('/'));
        }

        if(!baseUrl.equals("")){
            return baseUrl;
        }

        return url;
    }
}
